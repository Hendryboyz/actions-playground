name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push]
env:
  # Setting an environment variable with the value of a configuration variable
  env_var: dev
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."

  Image-Build:
    name: Build image
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-region: ${{ var.AWS_REGION }}
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


      
      # - name: Upload configs
      #   uses: shallwefootball/s3-upload-action@master
      #   with:
      #     aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
      #     aws_bucket: ${{ var.CONFIGURATION_BUCKET }}
      #     source_dir: 'dirname'
      
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2
        
      - name: Environment variables substitution
        id: build-image
        env:
          REGISTRY: "I need a test string"
          VARS_JSON: ${{ toJSON(vars) }}
        #   REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cat $GITHUB_ENV
          cat ${{ github.env }}
          echo "$VARS_JSON"
          echo ${{ vars.ENV_WORDS }}
          envsubst < .env.local > .env
          echo "Generated .env file"
          cat .env
          printenv
          echo "image=nginx:stable-alpine3.20-perl" >> $GITHUB_OUTPUT
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deployments/tasks/${{ env.env_var }}/backend.json
          container-name: backend-app
          image: ${{ steps.build-image.outputs.image }}
      
      - name: Check definition
        run: |
          cat ${{ steps.task-def.outputs.task-definition }}
      
      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ var.ECS_SERVICE_NAME }}
      #     cluster: ${{ var.ECS_CLUSTER_NAME }}
      #     wait-for-service-stability: true


